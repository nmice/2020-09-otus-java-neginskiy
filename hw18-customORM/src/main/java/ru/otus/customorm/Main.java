package ru.otus.customorm;

/**
 * Neginskiy M.B. 14.03.2021
 * <p>
 * ДОМАШНЕЕ ЗАДАНИЕ
 * Самодельный ORM
 * Цель: Научиться работать с jdbc.
 * На практике освоить многоуровневую архитектуру приложения.
 * Работа должна использовать базу данных в docker-контейнере .
 * <p>
 * Создайте в базе таблицу Client с полями:
 * <p>
 * • id целое число
 * • name строка
 * • age целое число
 * <p>
 * Создайте свою аннотацию @Id
 * <p>
 * Создайте класс Client (с полями, которые соответствуют таблице, поле id отметьте аннотацией).
 * <p>
 * Реализуйте интерфейс JdbcMapper<T>, который умеет работать с классами, в которых есть поле с аннотацией @Id. ?JdbcMapper<T> должен сохранять объект в базу и читать объект из базы.
 * Для этого надо реализовать оставшиеся интерфейсы из пакета mapper.
 * Таким обзазом, получится надстройка над DbExecutor<T>, которая по заданному классу умеет генерировать sql-запросы.
 * А DbExecutor<T> должен выполнять сгенерированные запросы.
 * <p>
 * Имя таблицы должно соответствовать имени класса, а поля класса - это колонки в таблице.
 * Проверьте его работу на классе Client.
 * <p>
 * Создайте еще одну таблицу Account:
 * • no строка
 * • type строка
 * • rest число с плавающей точкой
 * <p>
 * Создайте для этой таблицы класс Account и проверьте работу JdbcMapper на этом классе.
 */
public class Main {
    public static void main(String[] args) {
        System.out.println("***LETS GO***");
    }
}
